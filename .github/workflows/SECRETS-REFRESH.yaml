# This is a basic workflow to help you get started with Actions

name: SECRETS-REFRESH

# Controls when the workflow will run
on: [workflow_dispatch]
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  update:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Code Checkout
      - name: Code Checkout
        uses: actions/checkout@v3
      # Restore Cache For Repo Count
      - name: Restore Cache For Repo Count
        uses: actions/cache@v2
        with:
          path: repo-count
          key: repo-count
      # Print env
      - name: Print Env
        run: |
          printenv
      # Build secret files
      - name: Build Request Secrets file
        run: |
          echo -e "Accept: */*\nAuthorization: token ${{secrets.GH_TOKEN}}" > request_secrets
      - name: Build Pipeline Secrets file
        run: |
          echo -e "DOCKERHUB_USERNAME=${{secrets.DOCKERHUB_USERNAME}}\nDOCKERHUB_TOKEN=${{secrets.DOCKERHUB_TOKEN}}\nSONAR_HOST_URL=${{secrets.SONAR_HOST_URL}}\nSONAR_TOKEN=${{secrets.SONAR_TOKEN}}\nGH_USERNAME=${{secrets.GH_USERNAME}}\nGH_TOKEN=${{secrets.GH_TOKEN}}" > pipeline_secrets
      # Get value from cache file
      - name: Get Repo Count From Cache
        id: repo_count
        run: |
          echo "count=$(cat repo-count)" >> $GITHUB_OUTPUT
      # # Get repo count
      # - uses: octokit/request-action@v2.x
      #   name: Get Current Repo Object
      #   id: get_repo_obj
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      #   with:
      #     route: GET /orgs/{org}/repos
      #     org: ${{ github.repository_owner }}
      #     per_page: 75
      # # Run bash updater if values do not match
      # - name: Get Repo Count From Previous Request
      #   id: current_count
      #   env:
      #     RESPONSE_OBJECT: ${{ steps.get_repo_obj.outputs.data }}
      #   run: |
      #     echo "count=$(echo '$RESPONSE_OBJECT' | jq '. | length')" >> $GITHUB_OUTPUT
      # Get Count of Current Repo List
      - name: Get Current Repo Count
        id: current_repo_count
        run: |
          curl -s -H @request_secrets https://api.github.com/orgs/${{ github.repository_owner }}/repos | jq '. | length' >> $GITHUB_OUTPUT
      # Install pyNaCL
      - name: Install pyNaCL
        run: |
          pip3 install pynacl
      # If repo count has changed, run bash updater
      - name: Run bash updater
        if: steps.current_count.outputs.count != steps.repo_count.outputs.count
        run: |
          bash scripts/UpdateAllSecrets.sh
      # Save repo count to cache
      - name: Save Repo Count To Cache file
        if: steps.current_count.outputs.count != steps.repo_count.outputs.count
        env:
          NEW_COUNT: ${{ steps.current_count.outputs.count }}
        run: |
          echo $NEW_COUNT > repo-count
      - name: Push Cache file into Storage
        if: steps.current_count.outputs.count != steps.repo_count.outputs.count
        uses: actions/cache@v2
        with:
          path: repo-count
          key: repo-count